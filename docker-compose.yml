version: '3.8'

services:
  # MongoDB Database
  mongodb:
    image: mongo:7
    container_name: puabo-mongodb
    restart: unless-stopped
    environment:
      MONGO_INITDB_ROOT_USERNAME: admin
      MONGO_INITDB_ROOT_PASSWORD: password123
      MONGO_INITDB_DATABASE: puabo-os
    ports:
      - "27017:27017"
    volumes:
      - mongodb_data:/data/db
      - ./init-mongo.js:/docker-entrypoint-initdb.d/init-mongo.js:ro
    networks:
      - puabo-network

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: puabo-redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - puabo-network

  # Backend API
  backend:
    build:
      context: .
      dockerfile: Dockerfile.backend
    container_name: puabo-backend
    restart: unless-stopped
    environment:
      - NODE_ENV=production
      - PORT=3000
      - MONGODB_URI=mongodb://admin:password123@mongodb:27017/puabo-os?authSource=admin
      - REDIS_URL=redis://redis:6379
      - JWT_SECRET=your-production-jwt-secret
      - CORS_ORIGINS=http://localhost:5173,http://localhost:3001
    ports:
      - "3000:3000"
    volumes:
      - backend_uploads:/app/uploads
      - backend_logs:/app/logs
    depends_on:
      - mongodb
      - redis
    networks:
      - puabo-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Frontend (Creator Dashboard)
  frontend:
    build:
      context: .
      dockerfile: Dockerfile.frontend
    container_name: puabo-frontend
    restart: unless-stopped
    ports:
      - "5173:80"
    environment:
      - VITE_API_URL=http://localhost:3000/api
    depends_on:
      - backend
    networks:
      - puabo-network

  # Admin Dashboard
  admin:
    build:
      context: .
      dockerfile: Dockerfile.admin
    container_name: puabo-admin
    restart: unless-stopped
    ports:
      - "3001:80"
    environment:
      - VITE_API_URL=http://localhost:3000/api
    depends_on:
      - backend
    networks:
      - puabo-network

  # Nginx Reverse Proxy (optional)
  nginx:
    image: nginx:alpine
    container_name: puabo-nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - ./ssl:/etc/nginx/ssl:ro
    depends_on:
      - frontend
      - admin
      - backend
    networks:
      - puabo-network

volumes:
  mongodb_data:
    driver: local
  redis_data:
    driver: local
  backend_uploads:
    driver: local
  backend_logs:
    driver: local

networks:
  puabo-network:
    driver: bridge